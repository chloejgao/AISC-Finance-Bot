import yfinance as yf
import pandas as pd
from datetime import datetime, timedelta

def get_stock_data(tickers, period="1mo", interval="1d"):
    """
    Fetch stock data from Yahoo Finance
    
    Parameters:
    - tickers: string or list of ticker symbols (e.g., "AAPL" or ["AAPL", "MSFT"])
    - period: valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max
    - interval: valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo
    
    Returns:
    - DataFrame with stock data
    """
    try:
        data = yf.download(
            tickers=tickers,
            period=period,
            interval=interval,
            group_by='ticker',
            auto_adjust=True,
            prepost=False,
            threads=True
        )
        
        # If multiple tickers are requested, the data will be hierarchical
        if isinstance(tickers, list) and len(tickers) > 1:
            return data
        else:
            # For a single ticker, flatten the structure
            return data
            
    except Exception as e:
        print(f"Error fetching data: {e}")
        return None

def get_stock_info(ticker):
    """
    Get detailed information about a specific stock
    
    Parameters:
    - ticker: stock ticker symbol (e.g., "AAPL")
    
    Returns:
    - Dictionary with stock information
    """
    try:
        stock = yf.Ticker(ticker)
        info = stock.info
        return info
    except Exception as e:
        print(f"Error fetching stock info: {e}")
        return None

def get_historical_data(tickers, start_date=None, end_date=None):
    """
    Get historical data for specified date range
    
    Parameters:
    - tickers: string or list of ticker symbols
    - start_date: start date in 'YYYY-MM-DD' format (default: 1 year ago)
    - end_date: end date in 'YYYY-MM-DD' format (default: today)
    
    Returns:
    - DataFrame with historical stock data
    """
    if start_date is None:
        start_date = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')
    
    if end_date is None:
        end_date = datetime.now().strftime('%Y-%m-%d')
    
    try:
        data = yf.download(
            tickers=tickers,
            start=start_date,
            end=end_date,
            group_by='ticker',
            auto_adjust=True,
            prepost=False,
            threads=True
        )
        return data
    except Exception as e:
        print(f"Error fetching historical data: {e}")
        return None

def get_financials(ticker):
    """
    Get financial statements for a company
    
    Parameters:
    - ticker: stock ticker symbol
    
    Returns:
    - Dictionary with income statement, balance sheet, and cash flow data
    """
    try:
        stock = yf.Ticker(ticker)
        financials = {
            'income_statement': stock.income_stmt,
            'balance_sheet': stock.balance_sheet,
            'cash_flow': stock.cashflow
        }
        return financials
    except Exception as e:
        print(f"Error fetching financials: {e}")
        return None

def save_to_csv(data, filename):
    """
    Save data to a CSV file
    
    Parameters:
    - data: DataFrame to save
    - filename: output filename
    """
    try:
        data.to_csv(filename)
        print(f"Data saved to {filename}")
    except Exception as e:
        print(f"Error saving data: {e}")

# Example usage
if __name__ == "__main__":
    # Example 1: Get recent stock data for multiple companies
    tickers = ["AAPL", "MSFT", "GOOGL", "AMZN", "META"]
    stock_data = get_stock_data(tickers, period="1mo", interval="1d")
    if stock_data is not None:
        save_to_csv(stock_data, "stock_data_1month.csv")
    
    # Example 2: Get detailed info about a specific stock
    apple_info = get_stock_info("AAPL")
    if apple_info is not None:
        # Print some key information
        print(f"Company: {apple_info.get('shortName', 'N/A')}")
        print(f"Sector: {apple_info.get('sector', 'N/A')}")
        print(f"Industry: {apple_info.get('industry', 'N/A')}")
        print(f"Current Price: ${apple_info.get('currentPrice', 'N/A')}")
        print(f"Market Cap: ${apple_info.get('marketCap', 'N/A')}")
        print(f"52-Week High: ${apple_info.get('fiftyTwoWeekHigh', 'N/A')}")
        print(f"52-Week Low: ${apple_info.get('fiftyTwoWeekLow', 'N/A')}")
    
    # Example 3: Get historical data for a specific date range
    historical_data = get_historical_data("TSLA", 
                                         start_date="2023-01-01", 
                                         end_date="2023-12-31")
    if historical_data is not None:
        save_to_csv(historical_data, "tesla_2023_data.csv")
    
    # Example 4: Get financial statements
    amazon_financials = get_financials("AMZN")
    if amazon_financials is not None:
        # Save income statement to CSV
        income_stmt = amazon_financials['income_statement']
        save_to_csv(income_stmt, "amazon_income_statement.csv")